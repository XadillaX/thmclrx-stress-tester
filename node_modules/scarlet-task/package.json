{
  "name": "scarlet-task",
  "version": "0.1.0",
  "description": "A task queue module for node.js. You can set several children-queue for one task queue.",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "spidex": "~1.0.7",
    "async": "~0.9.0"
  },
  "devDependencies": {},
  "scripts": {
    "test": "node test/touhou.js"
  },
  "keywords": [
    "task",
    "queue",
    "complicating"
  ],
  "author": {
    "name": "XadillaX"
  },
  "license": "GPLv2",
  "repository": {
    "type": "git",
    "url": "git://github.com/XadillaX/scarlet-task.git"
  },
  "bugs": {
    "url": "https://github.com/XadillaX/scarlet-task/issues"
  },
  "homepage": "https://github.com/XadillaX/scarlet-task",
  "readme": "Scarlet Task\n============\n\nA task queue module for node.js. You can set several children-queue for one task queue.\n\nWhy named Scarlet? ๛ก(ｰ̀ωｰ́ก)\n------------\n\nAt first, I wrote this module is for searching one song in [萌否收音機](moe.fm). And last I found that song named <[the Embodiment of Scarlet Devil](http://moe.fm/listen?song=79922)>.\n\nFor rembembering this and for my favorite [Flandre Scarlet](http://touhou.wikia.com/wiki/Flandre_Scarlet), I named this module `Scarlet Task`.\n\nUsefulness\n------------\n\nFor one situation, once you want to crawl one website. If you use primitive `node.js`, it will like you're DDOSing that website.\n\nSo you need a task queue to help you. It will process tasks in queue one by one.\n\nWhat's more, you can set that one queue has several children-queue to work concurrently.\n\nAnd you can use it at any other situation that suitable.\n\nInstallation\n------------\n\n```shell\n$ npm install scarlet-task\n```\n\nTutorials\n------------\n\nRequire the module at first and instantiate an object.\n\n```javascript\nvar TaskQueue = require(\"scarlet-task\");\nvar taskQueue = new TaskQueue(10);\n```\n\n> The parameter for `constructor` means number of children-queue. Pass no parameter for default 1 children-queue.\n\nDefine a `processor` function for one task. In fact, you can pass an anonymous function.\n\n```javascript\nfunction processor(taskObject) {\n\t// get task object\n    var task = taskObject.task;\n    \n    // Do something...\n    // blahblah...\n    \n    taskQueue.taskDone(taskObject);\n    console.log(taskQueue.numberOfProcessed());\n};\n```\n\n> ***Notice:*** In the `processor` function, you should call `taskQueue.taskDone(taskObject)` when you think this task is done. And then the `taskQueue` will process next task. The parameter `taskObject` is a parameter that `taskQueue` passed to you.\n\nYou can push task(s) at anytime.\n\nThe task object can be any type - string, number, json, etc.\n\n```javascript\nvar task = \"it may be a url, or an object that process can do something with this task object.\";\ntaskQueue.push(task, processor);\n```\n\nSee more reference at `test/touhou.js`.\n\n> What's more, if you want to see the queue status for debuging, you can pass `true` to `taskDone` and `push`.\n\neg.\n\n```javascript\ntaskQueue.taskDone(taskObject, true);\ntaskQueue.push(task, processor, true);\n```\n\nYou can reset the number of processed tasks as well:\n\n```javascript\ntaskQueue.resetNumberOfProcessed();\n```\n\nAnd you can set an after-finish function so that Scarlet will call it after a certain number of tasks finished.\n\n```javascript\ntaskQueue.afterFinish(20, done, false);\n// this will call done() after 20 tasks done without loop (means only once unless you reset number of processed).\n\ntaskQueue.clearAfterFinish();\n// You can clear after finish processor\n```\n\n> See more reference at `test/afterfinish.js`.\n\nAuthor\n------------\n\nOnly me - XadillaX so far.\n\nYou can contribute your code! You're welcome.\n\n「雖然我覺得不怎麼可能有人會關注我」\n",
  "readmeFilename": "README.md",
  "gitHead": "3a8a91c2671f470194efb474203ca2394315248c",
  "_id": "scarlet-task@0.1.0",
  "_shasum": "2ab430d33885bfbaa9bd8381103dfc9a7e0630d0",
  "_from": "scarlet-task@"
}
